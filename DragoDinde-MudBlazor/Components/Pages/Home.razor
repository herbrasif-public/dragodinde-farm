@page "/"
@using DragoDinde_MudBlazor.Repositories
@using DragoDinde_MudBlazor.Models
@using DragoDinde_MudBlazor.Business
@using MudBlazor
@using System.Text
@inject IJSRuntime JSRuntime
@inject DragodindeRepository DragodindeRepository
@inject UserRepository UserRepository
@inject DragodindeGenealogic DragodindeGenealogic
@inject DragodindeReproduction DragodindeReproduction
@inject StringComparerCustom StringComparerCustom
@inject DragodindeManager DragodindeManager
@implements IDisposable

<PageTitle>Home</PageTitle>

<input type="hidden" id="idInstanceForCallback" value="@idInstance" />

<label for="selector-generation">Générations</label>
<MudSelect @bind-Value="selectedGeneration">
	@foreach (var gen in generations)
	{
		<MudSelectItem Value="gen.Id">@gen.Name</MudSelectItem>
	}
</MudSelect>

<div>selected  = @selectedGeneration</div>


<label for="selector-generation">Couleurs</label>
<MudSelect @bind-Value="selectedColor">
	@foreach (var color in colors)
	{
		<MudSelectItem Value="color.Id">@color.Name</MudSelectItem>
	}
</MudSelect>

<div>selected : @selectedColor</div>(q)


<div>Possiblitées :</div>

<div id="do-list" style="display: flex;
            flex-wrap: wrap;
            gap: 10px;">
	@foreach (var dragodindeoption in dragodindeoptionsToDisplay)
	{
		@* <div id="do-id-@dragodindeoption.title" onmousedown="copyAndEnableDrag('do-id-@dragodindeoption.title')" style="width: 50px;height: 50px;background: linear-gradient(to bottom, #@dragodindeoption.colorA 50%, #@dragodindeoption.colorB 50%);"></div> *@
		<div id="do-id-@dragodindeoption.title"
		title="@dragodindeoption.title"
		ondragstart="event.dataTransfer.setData('text/plain', event.target.id)"
		draggable="true" style="width: 50px;height: 50px;background: linear-gradient(to bottom, #@dragodindeoption.colorA 50%, #@dragodindeoption.colorB 50%);"></div>

	}

</div>


<div>Dragodindes sauvegardées :</div>

<div>
	@foreach (var dragodindeoption in dragodindesSaved)
	{
		<div style="display: inline-flex">
			<p>@dragodindeoption.droName</p>
			<div id="do-id-@dragodindeoption.droSaved.title"
			title="@dragodindeoption.droSaved.title"
			ondragstart="event.dataTransfer.setData('text/plain', event.target.id)"
			draggable="true" style="width: 50px;height: 50px;background: linear-gradient(to bottom, #@dragodindeoption.droSaved.colorA 50%, #@dragodindeoption.droSaved.colorB 50%);"></div>
		</div>
	}
</div>

<MudCheckBox @bind-Value="MotherPredisp" Label="Mère prédisposée"></MudCheckBox>
<MudCheckBox @bind-Value="FatherPredisp" Label="Père prédisposé"></MudCheckBox>

<div class="container">
	<div class="level">
		<div class="box" id="box1" drop-zone="true"></div><div class="box" id="box2" drop-zone="true"></div><div class="box" id="box3" drop-zone="true"></div><div class="box" id="box4" drop-zone="true"></div>
		<div class="box" id="box5" drop-zone="true"></div><div class="box" id="box6" drop-zone="true"></div><div class="box" id="box7" drop-zone="true"></div><div class="box" id="box8" drop-zone="true"></div>
		<div class="box" id="box9" drop-zone="true"></div><div class="box" id="box10" drop-zone="true"></div><div class="box" id="box11" drop-zone="true"></div><div class="box" id="box12" drop-zone="true"></div>
		<div class="box" id="box13" drop-zone="true"></div><div class="box" id="box14" drop-zone="true"></div><div class="box" id="box15" drop-zone="true"></div><div class="box" id="box16" drop-zone="true"></div>
	</div>
	<div class="line" style="left: 6.25%;"></div>
	<div class="line" style="left: 18.75%;"></div>
	<div class="line" style="left: 31.25%;"></div>
	<div class="line" style="left: 43.75%;"></div>
	<div class="line" style="left: 56.25%;"></div>
	<div class="line" style="left: 68.75%;"></div>
	<div class="line" style="left: 81.25%;"></div>
    using DragoDinde_MudBlazor.Business;
	<div class="line" style="left: 93.75%;"></div>
	<div class="level">
		<div class="box" id="box17" drop-zone="true"></div><div class="box" id="box18" drop-zone="true"></div><div class="box" id="box19" drop-zone="true"></div><div class="box" id="box20" drop-zone="true"></div>
		<div class="box" id="box21" drop-zone="true"></div><div class="box" id="box22" drop-zone="true"></div><div class="box" id="box23" drop-zone="true"></div><div class="box" id="box24" drop-zone="true"></div>
		<div class="vertical-line" style="left: 50%;"></div>
	</div>
	<div class="line" style="left: 25%;"></div>
	<div class="line" style="left: 75%;"></div>
	<div class="level">
		<div class="box" id="box25" drop-zone="true"></div><div class="box" id="box26" drop-zone="true"></div><div class="box" id="box27" drop-zone="true"></div><div class="box" id="box28" drop-zone="true"></div>
	</div>
	<div class="line" style="left: 25%;"></div>
	<div class="line" style="left: 75%;"></div>
	<div class="level">
		<div class="box" id="box29" drop-zone="true"></div><div class="box" id="box30" drop-zone="true"></div>
	</div>
	<div class="line" style="left: 50%;"></div>
	<div class="level" style="display: none;">
		<div class="box" id="box31"></div>
	</div>
</div>

<h2>Sauvegarder des parents : </h2>

<MudTextField @bind-Value="DradoDindeToSave" Label="Nom de la dragodinde au sauvegarder" Variant="Variant.Text"></MudTextField>
<MudButton Variant="Variant.Filled" Onclick="() => saveParent(false)">Sauvegarder la mère</MudButton>
<MudButton Variant="Variant.Filled" OnClick="() => saveParent(true)">Sauvegarder le père</MudButton>

<p>@saveError</p>

<div>List of possibilities : </div>

@foreach (var mp in MatchesPossibilities)
{
	<p>@mp.Item1.title : @mp.Item2.ToString("P2")</p>
}

@code {

	#region Global Callback
	delegate void DelegCallbackDrop(string treeCellId, string titleId, string treeCellIdToClean);

	static List<(Guid, DelegCallbackDrop)> callbackDropSubscribers = new List<(Guid, DelegCallbackDrop)>();

	[JSInvokable]
	public static void CallbackDrop(string Guid, string treeCellId, string titleId, string treeCellIdToClean)
	{
		var cbToUse = callbackDropSubscribers.FirstOrDefault(x => x.Item1.ToString() == Guid);
		if (cbToUse != default((Guid, DelegCallbackDrop)))
			cbToUse.Item2(treeCellId, titleId, treeCellIdToClean);
		else
			Console.WriteLine("No callback found for guid : " + Guid);
	}
	#endregion

	#region Properties
	private string saveError = "";
	private List<(string droName, DragodindeOption droSaved)> dragodindesSaved = new List<(string droName, DragodindeOption droSaved)>();
	private string DradoDindeToSave = "";
	public List<(DragodindeOption, double)> MatchesPossibilities = new List<(DragodindeOption, double)>();
	public List<DragodindeTreeCell> cells = new List<DragodindeTreeCell>();
	private bool MotherPredisp = false;
	private bool FatherPredisp = false;
	private Guid idInstance;
	private IList<Generation> generations;
	int selectedGeneration = 0;
	private IList<DragodindeColor> colors;
	private int selectedColor = 0;
	private List<DragodindeOption> dragodindeoptions = new List<DragodindeOption>();
	private IList<DragodindeOption> dragodindeoptionsToDisplay
	{
		get
		{
			Console.WriteLine("value changed - selectedGeneration  = " + selectedGeneration);
			return dragodindeoptions.Where(x =>
				(selectedGeneration == 0 || x.stage == selectedGeneration)
				&& (selectedColor == 0 || StringComparerCustom.ContainsIgnoringAccents(x.title, colors.First(x => x.Id == selectedColor).Name))
			).ToList();
		}
	}
	#endregion

	#region Lifecycle events

	protected override void OnInitialized()
	{
		idInstance = Guid.NewGuid();
		callbackDropSubscribers.Add(new(idInstance, CallbackDropToSubscribe));

		generations = Generation.GenerateGeneration();

		colors = DragodindeColor.GenerateColors();

		dragodindeoptions.AddRange(DragodindeOption.GenerateList());
	}


	public void Dispose()
	{
		if (callbackDropSubscribers.Any(x => x.Item1 == idInstance))
			callbackDropSubscribers.Remove(callbackDropSubscribers.First(x => x.Item1 == idInstance));
	}

	#endregion

	#region Events
	public void saveParent(bool isMother){
		DragodindeManager.SaveParent(isMother, DradoDindeToSave, ref saveError, ref cells, ref dragodindesSaved);
	}

	private async Task CreateCopyOfDiv(string id)
	{
		await JSRuntime.InvokeVoidAsync("copyAndEnableDrag", "do-id-" + id);
	}
	#endregion

	#region JsInterop
	[JSInvokable]
	public void CallbackDropToSubscribe(string treeCellId, string titleId, string treeCellIdToClean)
	{
		titleId = titleId.Replace("clone-", "").Replace("do-id-", "");

		if (treeCellId == null)
		{
			var dtcToRemove = cells.FirstOrDefault(x => x.dragodindeOption?.title == titleId);
			if (dtcToRemove != null)
				cells.Remove(dtcToRemove);
		}
		else
		{
			DragodindeOption dro = dragodindeoptions.FirstOrDefault(x => StringComparerCustom.CompareIgnoringAccents(x.title, titleId))?.Clone() as DragodindeOption ?? null;

			int cellPos = int.Parse(treeCellId.Replace("box", ""));
			int gswScore = cellPos < 17 ? 1 : cellPos < 25 ? 3 : cellPos < 29 ? 9 : 10;
			dro.gsw = gswScore;

			if (cells.Any(c => c.CellId == treeCellId))
				cells.First(c => c.CellId == treeCellId).dragodindeOption = dragodindeoptions.First(x => StringComparerCustom.CompareIgnoringAccents(x.title, titleId));
			else
				cells.Add(new DragodindeTreeCell() { CellId = treeCellId, dragodindeOption = dragodindeoptions.First(x => StringComparerCustom.CompareIgnoringAccents(x.title, titleId)) });
		}

		if (!String.IsNullOrWhiteSpace(treeCellIdToClean))
		{
			var dtcToRemove = cells.FirstOrDefault(x => x.CellId == treeCellIdToClean);
			if (dtcToRemove != null)
				cells.Remove(dtcToRemove);
		}

		DragodindeReproduction.UpdateProbabilities(ref dragodindeoptions, FatherPredisp, MotherPredisp, ref cells);
		StateHasChanged();
	}
	#endregion
}

<script>
	function copyAndEnableDrag(divId) {
		console.log("divId : " + divId);
		var originalDiv = document.getElementById(divId);
		var copiedDiv = originalDiv.cloneNode(true);
		copiedDiv.id = "copiedDiv";
		copiedDiv.style.position = "absolute";
		copiedDiv.style.top = "200px"; // Ajuster la position initiale
		copiedDiv.style.left = "200px";
		copiedDiv.setAttribute("draggable", "true");
		copiedDiv.ondragstart = function(event) {
			event.dataTransfer.setData("text/plain", event.target.id);
		};
		document.body.appendChild(copiedDiv);
	}

	document.body.ondrop = function(event) {
		var dropzone = event.target;
		var id = event.dataTransfer.getData("text");
		var idInstance = document.getElementById('idInstanceForCallback').value;
		var idSourceToClean = "";
		console.log(document.getElementById(id).parentElement);
		if (dropzone.getAttribute("drop-zone") === "true")
		{
			event.preventDefault();
			var originalDiv = document.getElementById(id);
			var draggableElement = originalDiv.cloneNode(true);
			dropzone.appendChild(draggableElement);
			draggableElement.style.position = "relative";
			draggableElement.style.top = "0px";
			draggableElement.style.left = "0px";
			draggableElement.setAttribute("id", "clone-" + id);
			draggableElement.setAttribute("clone", "true");

			if (document.getElementById(id).getAttribute("clone") === "true") {
				idSourceToClean = document.getElementById(id).parentElement.id;
				document.getElementById(id).remove();
			}

				console.log(event.target);
				console.log('event.target.id : ' + event.target.id);
				console.log('id : ' + id);
			DotNet.invokeMethodAsync('DragoDinde_MudBlazor', 'CallbackDrop', idInstance, event.target.id, id, idSourceToClean)
			.then(datas => {
				console.log('Fonction C# appelée avec succès');
			}).catch(error => {
				console.error("Erreur lors de l'appel de la fonction C#: ", error);
			});
		}
		else if (document.getElementById(id).getAttribute("clone") === "true"){

			console.log("remove drag");
			document.getElementById(id).remove();


			DotNet.invokeMethodAsync('DragoDinde_MudBlazor', 'CallbackDrop', idInstance, null, id, idSourceToClean)
			.then(datas => {
				console.log('Fonction C# appelée avec succès');
			}).catch(error => {
				console.error("Erreur lors de l'appel de la fonction C#: ", error);
			});
		}
		else {
			console.log("not dropable");
		}
	};



	document.body.ondragover = function(event) {
		event.preventDefault();
	};
</script>

<style>
	.container {
		display: flex;
		flex-direction: column;
		align-items: center;
		max-width: 1200px;
	}

	.level {
		display: flex;
		justify-content: space-evenly;
		margin: 20px 0;
		width: 100%;
		position: relative;
	}

	.box {
		width: 54px;
		height: 54px;
		border: 2px solid darkolivegreen;
		background-color: #E0F7FA;
		text-align: center;
		line-height: 60px;
		font-family: Arial, sans-serif;
		font-weight: bold;
		color: #00BFFF;
		box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
	}

	.line {
		position: absolute;
		border-left: 2px solid #00BFFF;
	}

	.vertical-line {
		height: 30px;
		border-left: 2px solid #00BFFF;
		position: absolute;
		top: 0;
	}
</style>
